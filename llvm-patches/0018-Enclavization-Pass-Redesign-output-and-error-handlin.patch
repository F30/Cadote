From 3440cb9881df2ac438b32ab071963ac72cea12c9 Mon Sep 17 00:00:00 2001
From: Felix Dreissig <felix.dreissig@fau.de>
Date: Fri, 14 May 2021 11:48:34 +0000
Subject: [PATCH 18/34] Enclavization Pass: Redesign output and error handling

* Don't use exceptions, since the Rust compiler handles them badly. Use
  assertions instead, as we actually already rely on them being enabled
  in LLVM.
* Don't use `LLVM_DEBUG`, which requires `-C llvm-args=-debug`. That
  enables all LLVM debug output, which is hard to process and leads to
  bad performance.
---
 llvm/lib/Transforms/Utils/Enclavization/Support.cpp  | 3 +--
 llvm/lib/Transforms/Utils/Enclavization/Wrappers.cpp | 1 -
 llvm/lib/Transforms/Utils/EnclavizationBinPass.cpp   | 7 ++-----
 llvm/lib/Transforms/Utils/EnclavizationLibPass.cpp   | 4 ++--
 4 files changed, 5 insertions(+), 10 deletions(-)

diff --git a/llvm/lib/Transforms/Utils/Enclavization/Support.cpp b/llvm/lib/Transforms/Utils/Enclavization/Support.cpp
index 47a443bd1d15..b9dc7fc89a0c 100644
--- a/llvm/lib/Transforms/Utils/Enclavization/Support.cpp
+++ b/llvm/lib/Transforms/Utils/Enclavization/Support.cpp
@@ -1,6 +1,5 @@
 #include <assert.h>
 #include <regex>
-#include <stdexcept>
 #include <string>
 
 #include "llvm/ADT/StringRef.h"
@@ -27,7 +26,7 @@ std::string demangleRustName(StringRef name) {
 
   if (rustc_demangle(mangledName, demangledName, DEMANGLED_LEN_MAX) == 0) {
     free(mangledName);
-    throw std::runtime_error("Demangling failed");
+    assert(false && "Demangling failed");
   }
 
   free(mangledName);
diff --git a/llvm/lib/Transforms/Utils/Enclavization/Wrappers.cpp b/llvm/lib/Transforms/Utils/Enclavization/Wrappers.cpp
index 6a66d0c46454..6eaab0077c7c 100644
--- a/llvm/lib/Transforms/Utils/Enclavization/Wrappers.cpp
+++ b/llvm/lib/Transforms/Utils/Enclavization/Wrappers.cpp
@@ -1,7 +1,6 @@
 #include <assert.h>
 #include <sstream>
 #include <string>
-#include <stdexcept>
 #include <vector>
 
 #include "llvm/IR/Constants.h"
diff --git a/llvm/lib/Transforms/Utils/EnclavizationBinPass.cpp b/llvm/lib/Transforms/Utils/EnclavizationBinPass.cpp
index f645ee8a23db..87a5b2536b2e 100644
--- a/llvm/lib/Transforms/Utils/EnclavizationBinPass.cpp
+++ b/llvm/lib/Transforms/Utils/EnclavizationBinPass.cpp
@@ -1,4 +1,3 @@
-#include <stdexcept>
 #include <string>
 #include <unordered_set>
 
@@ -29,9 +28,7 @@ bool EnclavizationBin::runOnModule(Module &mod) {
   // main() through std::rt::lang_start()
   // Let's use it if it doesn't cause any errors, since it's easier to find than the Rust main()
   Function *mainFunc = mod.getFunction("main");
-  if (!mainFunc) {
-    throw std::runtime_error("Main function not found");
-  }
+  assert(mainFunc && "Main function not found");
 
   Function *enclaveInitFunc = getInitEnclaveDecl(&mod);
   CallInst::Create(
@@ -70,7 +67,7 @@ bool EnclavizationBin::runOnModule(Module &mod) {
   if (callsToWrap.empty()) {
     return false;
   }
-  LLVM_DEBUG(dbgs() << "Found " << callsToWrap.size() << " calls to wrap\n");
+  dbgs() << "Enclavization: Found " << callsToWrap.size() << " calls to wrap\n";
 
   std::unordered_set<Function *> replacedFuncs;
 
diff --git a/llvm/lib/Transforms/Utils/EnclavizationLibPass.cpp b/llvm/lib/Transforms/Utils/EnclavizationLibPass.cpp
index 5ed8ed4bc447..a1fa771644fd 100644
--- a/llvm/lib/Transforms/Utils/EnclavizationLibPass.cpp
+++ b/llvm/lib/Transforms/Utils/EnclavizationLibPass.cpp
@@ -36,12 +36,12 @@ bool EnclavizationLib::runOnModule(Module &mod) {
       funcsToWrap.insert(&func);
     }
   }
-  LLVM_DEBUG(dbgs() << "Found " << funcsToWrap.size() << " functions to wrap\n");
+  dbgs() << "Enclavization: Found " << funcsToWrap.size() << " functions to wrap\n";
 
   // Write EDL file to current working directory
   std::string edlFileName = "enclave.edl";
   EdlFile edlFile(edlFileName);
-  LLVM_DEBUG(dbgs() << "Writing EDL definitions to " << edlFileName << "\n");
+  dbgs() << "Enclavization: Writing EDL definitions to " << edlFileName << "\n";
 
   for (auto enclavedFunc : funcsToWrap) {
     // Add postgate function to the module
-- 
2.25.1

