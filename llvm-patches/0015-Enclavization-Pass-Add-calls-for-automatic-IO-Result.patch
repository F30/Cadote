From 62253db9ccfcd9e7b69c1ace0a78c6b894145241 Mon Sep 17 00:00:00 2001
From: Felix Dreissig <felix.dreissig@fau.de>
Date: Wed, 12 May 2021 14:09:29 +0000
Subject: [PATCH 15/33] Enclavization Pass: Add calls for automatic IO Result
 transformation
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

â€¦ from sgx_tstd::io::Result to std::io::Result.
---
 .../Utils/Enclavization/RuntimeLib.h          |  7 ++
 .../Utils/Enclavization/RuntimeLib.cpp        | 34 +++++++
 .../Utils/Enclavization/Support.cpp           | 10 +-
 .../Utils/Enclavization/Wrappers.cpp          | 96 ++++++++++++++++++-
 4 files changed, 142 insertions(+), 5 deletions(-)

diff --git a/llvm/include/llvm/Transforms/Utils/Enclavization/RuntimeLib.h b/llvm/include/llvm/Transforms/Utils/Enclavization/RuntimeLib.h
index 517cee1135e5..c996ddb2a95c 100644
--- a/llvm/include/llvm/Transforms/Utils/Enclavization/RuntimeLib.h
+++ b/llvm/include/llvm/Transforms/Utils/Enclavization/RuntimeLib.h
@@ -1,6 +1,7 @@
 #ifndef LLVM_TRANSFORMS_UTILS_ENCLAVIZATION_RUNTIMELIB_H
 #define LLVM_TRANSFORMS_UTILS_ENCLAVIZATION_RUNTIMELIB_H
 
+#include "llvm/IR/DerivedTypes.h"
 #include "llvm/IR/Function.h"
 #include "llvm/IR/Module.h"
 
@@ -10,6 +11,8 @@
 #define ERROR_HANDLER_FUNC "cadote_enclave_error_handler"
 #define CHECK_ARG_PTR_FUNC "cadote_check_arg_ptr"
 #define CHECK_RETURN_PTR_FUNC "cadote_check_return_ptr"
+#define TRANSFORM_IORESULT_UNIT_FUNC "cadote_transform_ioresult_unit"
+#define TRANSFORM_IORESULT_BOOL_FUNC "cadote_transform_ioresult_bool"
 
 // LLVM type for `usize`
 #define USIZE_TYPE Type::getInt64Ty
@@ -27,5 +30,9 @@ llvm::Function *getCheckArgPtrDecl(llvm::Module *);
 
 llvm::Function *getCheckReturnPtrDecl(llvm::Module *);
 
+llvm::Function *getTransformIoresultUnitDecl(llvm::Module *mod);
+
+llvm::Function *getTransformIoresultBoolDecl(llvm::Module *mod, llvm::StructType *);
+
 
 #endif
diff --git a/llvm/lib/Transforms/Utils/Enclavization/RuntimeLib.cpp b/llvm/lib/Transforms/Utils/Enclavization/RuntimeLib.cpp
index 758ac4a53fd5..0771b68fbdf7 100644
--- a/llvm/lib/Transforms/Utils/Enclavization/RuntimeLib.cpp
+++ b/llvm/lib/Transforms/Utils/Enclavization/RuntimeLib.cpp
@@ -1,3 +1,4 @@
+#include "llvm/IR/DerivedTypes.h"
 #include "llvm/IR/Function.h"
 #include "llvm/IR/Module.h"
 
@@ -74,3 +75,36 @@ Function *getCheckReturnPtrDecl(Module *mod) {
 
   return checkFunc;
 }
+
+
+Function *getTransformIoresultUnitDecl(Module *mod) {
+  Function *transformFunc = mod->getFunction(TRANSFORM_IORESULT_UNIT_FUNC);
+  if (transformFunc) {
+    return transformFunc;
+  }
+
+  ArrayType *emptyPadding = ArrayType::get(Type::getInt8Ty(mod->getContext()), 0);
+  ArrayType *array = ArrayType::get(Type::getInt8Ty(mod->getContext()), 15);
+  Type *elems[] = { emptyPadding, Type::getInt8Ty(mod->getContext()), array };
+  StructType *argType = StructType::create(elems);
+
+  Type *transformArgs[] = { argType->getPointerTo() };
+  FunctionType *transformType = FunctionType::get(Type::getInt128Ty(mod->getContext()), transformArgs, false);
+  transformFunc = Function::Create(transformType, Function::ExternalLinkage, TRANSFORM_IORESULT_UNIT_FUNC, mod);
+
+  return transformFunc;
+}
+
+
+Function *getTransformIoresultBoolDecl(Module *mod, StructType *sretType) {
+  Function *transformFunc = mod->getFunction(TRANSFORM_IORESULT_BOOL_FUNC);
+  if (transformFunc) {
+    return transformFunc;
+  }
+
+  Type *transformArgs[] = { sretType->getPointerTo(), sretType->getPointerTo() };
+  FunctionType *transformType = FunctionType::get(Type::getVoidTy(mod->getContext()), transformArgs, false);
+  transformFunc = Function::Create(transformType, Function::ExternalLinkage, TRANSFORM_IORESULT_BOOL_FUNC, mod);
+
+  return transformFunc;
+}
diff --git a/llvm/lib/Transforms/Utils/Enclavization/Support.cpp b/llvm/lib/Transforms/Utils/Enclavization/Support.cpp
index cf248453f393..6129c52ddc61 100644
--- a/llvm/lib/Transforms/Utils/Enclavization/Support.cpp
+++ b/llvm/lib/Transforms/Utils/Enclavization/Support.cpp
@@ -17,10 +17,10 @@
 
 using namespace llvm;
 
-#define TO_WRAP_SUFFIX "_enclaved_"
-
 #define DEMANGLED_LEN_MAX 200
 
+static std::string TO_WRAP_SUFFIXES[] = { "_enclaved", "_enclaved_ioresult_unit_", "_enclaved_ioresult_bool_" };
+
 
 std::string demangleRustName(StringRef name) {
   if (!isMangledRustName(name)) {
@@ -79,8 +79,10 @@ std::vector<CallBase *> getCallsToWrap(Module &mod) {
         // TODO: Indirect calls
         if (callee) {
           std::string name = demangleRustName(callee->getName());
-          if (strEndsWith(name, TO_WRAP_SUFFIX)) {
-            callsToWrap.push_back(origCall);
+          for (auto suffix : TO_WRAP_SUFFIXES) {
+            if (strEndsWith(name, suffix)) {
+              callsToWrap.push_back(origCall);
+            }
           }
         }
       }
diff --git a/llvm/lib/Transforms/Utils/Enclavization/Wrappers.cpp b/llvm/lib/Transforms/Utils/Enclavization/Wrappers.cpp
index 008e353e7d88..0fa16cff2c7e 100644
--- a/llvm/lib/Transforms/Utils/Enclavization/Wrappers.cpp
+++ b/llvm/lib/Transforms/Utils/Enclavization/Wrappers.cpp
@@ -13,6 +13,7 @@
 #include "llvm/IR/Module.h"
 #include "llvm/IR/Type.h"
 #include "llvm/IR/Value.h"
+#include "llvm/Support/Casting.h"
 
 #include "llvm/Transforms/Utils/Enclavization/Export.h"
 #include "llvm/Transforms/Utils/Enclavization/RuntimeLib.h"
@@ -33,6 +34,27 @@ static bool createdPostageRealDecl = false;
 static bool createdPostageProxyDecl = false;
 
 
+#define MEMCPY_FUNC "llvm.memcpy.p0i8.p0i8.i64"
+
+static Function *getMemcpyDecl(Module *mod) {
+  Function *memcpyFunc = mod->getFunction(MEMCPY_FUNC);
+  if (memcpyFunc) {
+    return memcpyFunc;
+  }
+
+  Type *memcpyArgs[] = {
+    Type::getInt8Ty(mod->getContext())->getPointerTo(),
+    Type::getInt8Ty(mod->getContext())->getPointerTo(),
+    Type::getInt64Ty(mod->getContext()),
+    Type::getInt1Ty(mod->getContext())
+  };
+  FunctionType *memcpyType = FunctionType::get(Type::getVoidTy(mod->getContext()), memcpyArgs, false);
+  memcpyFunc = Function::Create(memcpyType, Function::ExternalLinkage, MEMCPY_FUNC, mod);
+
+  return memcpyFunc;
+}
+
+
 static void adoptAttrs(Function *wrappedFunc, Function *gateFunc) {
   AttributeList wrappedAttrs = wrappedFunc->getAttributes();
   // Adopt param and return attributes
@@ -422,6 +444,78 @@ Function *getPostgateImpl(CallBase *callToWrap, EdlFile &edlFile) {
     }
   }
 
+  Value *returnVal = wrappedCall;
+
+  std::string wrappedFuncName = demangleRustName(wrappedFunc->getName());
+  // Convert between IO Result types if required
+  if (strEndsWith(wrappedFuncName, "_enclaved_ioresult_unit_")) {
+    assert(wrappedFunc->getReturnType() == Type::getInt128Ty(mod->getContext()) &&
+           "Unexpected return type for ioresult_unit function");
+    Function *transformFunc = getTransformIoresultUnitDecl(mod);
+
+    AllocaInst *argAlloc = new AllocaInst(
+      wrappedCall->getType(),
+      0,
+      "",
+      postgateBlock
+    );
+    new StoreInst(
+      wrappedCall,
+      argAlloc,
+      postgateBlock
+    );
+    BitCastInst *argCast = new BitCastInst(
+      argAlloc,
+      transformFunc->getFunctionType()->getParamType(0),
+      "",
+      postgateBlock
+    );
+
+    Value *transformArgs[] = { argCast };
+    returnVal = CallInst::Create(
+      transformFunc,
+      transformArgs,
+      "",
+      postgateBlock
+    );
+  } else if (strEndsWith(wrappedFuncName, "_enclaved_ioresult_bool_")) {
+    assert(wrappedFunc->getReturnType() == Type::getVoidTy(mod->getContext()) &&
+           wrappedFunc->hasParamAttribute(0, Attribute::AttrKind::StructRet) &&
+           "Unexpected return type for ioresult_bool function");
+    uint64_t sretSize = wrappedFunc->getParamAttribute(0, Attribute::AttrKind::Dereferenceable).getValueAsInt();
+    StructType *sretType = cast<StructType>(wrappedFunc->getFunctionType()->getParamType(0)->getPointerElementType());
+    Function *transformFunc = getTransformIoresultBoolDecl(mod, sretType);
+
+    Value *origSret = wrappedArgs[0];
+    AllocaInst *sretAlloc = new AllocaInst(
+      sretType,
+      0,
+      "",
+      postgateBlock
+    );
+    Value *transformArgs[] = { sretAlloc, origSret };
+    CallInst::Create(
+      transformFunc,
+      transformArgs,
+      "",
+      postgateBlock
+    );
+
+    // Copy result of transformation back to original location
+    Value *memcpyArgs[] = {
+      new BitCastInst(origSret, Type::getInt8Ty(mod->getContext())->getPointerTo(), "", postgateBlock),
+      new BitCastInst(sretAlloc, Type::getInt8Ty(mod->getContext())->getPointerTo(), "", postgateBlock),
+      ConstantInt::get(Type::getInt64Ty(mod->getContext()), sretSize),
+      ConstantInt::getFalse(mod->getContext())
+    };
+    CallInst::Create(
+      getMemcpyDecl(mod),
+      memcpyArgs,
+      "",
+      postgateBlock
+    );
+  }
+
   if (wrappedFunc->getReturnType() == Type::getVoidTy(mod->getContext())) {
     ReturnInst::Create(
       mod->getContext(),
@@ -435,7 +529,7 @@ Function *getPostgateImpl(CallBase *callToWrap, EdlFile &edlFile) {
     // Pass result from original function
     ReturnInst::Create(
       mod->getContext(),
-      wrappedCall,
+      returnVal,
       postgateBlock
     );
   }
-- 
2.25.1

